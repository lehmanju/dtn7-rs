# BEWARE: this config is sourced by bash, shell syntax rules apply!

NAME=3n-delayed

# animated scenarios must have the link to the mobility model to a file in /shared
# autostart should be enabled for the movement
# node mapping must fit the scenario
# movements can be generated using bonnmotion
SCENARIO=three_nodes.xml

# optional core automator recording, will be played in a loop
AUTOMATOR=three_nodes.pos

GUI=0

MONITOR_PIDSTAT=1
# monitor specific process name (default, all on node -> no graph plotting!)
MONITOR_PIDSTAT_PARAMS="dtnd"

MONITOR_NET=1
# interface to monitor (default: all interfaces up)
MONITOR_NET_PARAMS="eth0"

MONITOR_XY=1
# Delay in seconds between recordings
#MONITOR_XY_PARAMS="5"

MONITOR_CONTACTS=1
# Delay in seconds between recordings
#MONITOR_CONTACTS_PARAMS="5"

# commands to execute at beginning of simulation
#START_EXEC=("echo started > started.log" "echo second > second.log")

# commands to daemonize at beginning of simulation, e.g., dtnd
START_DAEMONIZED=('dtnd -C mtcp -n $(hostname) -j 3s -i 2s -p 5s -d')

# usually commands started at the beginning of the simulation are put here for shutdown
SHUTDOWN_PROCS="dtnd"

# let simulation warm up for a period of time if needed
#WARMUP=5

# run simulation for this long
# without RUNTIME simulation will run until a shutdown.txt is found in the shared volume
RUNTIME=30

#COLLECT_EVERYTHING=1

# Called right after initializing the simulation, prior to any monitoring or START_EXEC/START_DAEMONIZED
pre() {
    echo "pre hook - results in $1"
    cp /shared/bin/* /usr/local/bin
    cp /shared/recv_logger /usr/local/bin
}

# Called right after starting monitoring and/or START_EXEC/START_DAEMONIZED
start() {
    vcmd -c /tmp/pycore.1/n1 -- bash -c "echo 'The quick brown fox jumps over the lazy dog' | dtnsend -r dtn://n3/txt && echo 1 > sent.log" 
    vcmd -c /tmp/pycore.1/n1 -- bash -c "echo 'Pack my box with five dozen liquor jugs' | dtnsend -r dtn://n3/txt && echo 2 >> sent.log" 
    vcmd -c /tmp/pycore.1/n1 -- bash -c "echo 'The five boxing wizards jump quickly' | dtnsend -r dtn://n3/txt && echo 3 >> sent.log" 
    vcmd -c /tmp/pycore.1/n3 -- sh -c "nohup dtntrigger -v -e txt -c /usr/local/bin/recv_logger > nohup.dtntrigger.log 2>&1 & sleep 1"
}

# Called after simulation time is over but prior to collecting logs
post() {
    echo "post hook - results in $1"
}

# Called after logs have been collected from all nodes
analyze() {
    echo "post hook - results in $1"
    # collect number of sent messages and received messages
    SENT=$(cat $1/n1/sent.log | wc -l)
    RECEIVED=$(cat $1/n3/recv.log | wc -l)

    # check if neighbor discovery works as expected
    IPND_CORRECT=1
    # expected 1
    N1_PEERS=$(rg "New peer" $1/n1/nohup.dtnd* | cut -d " " -f 7- | sort -u | wc -l)
    if [ $N1_PEERS -ne 1 ]; then
        IPND_CORRECT=0
    fi

    # expected 2
    N2_PEERS=$(rg "New peer" $1/n2/nohup.dtnd* | cut -d " " -f 7- | sort -u | wc -l)
    if [ $N2_PEERS -ne 2 ]; then
        IPND_CORRECT=0
    fi

    # expected 1
    N3_PEERS=$(rg "New peer" $1/n3/nohup.dtnd* | cut -d " " -f 7- | sort -u | wc -l)
    if [ $N3_PEERS -ne 1 ]; then
        IPND_CORRECT=0
    fi

    # expected 1
    N1_FORGOT=$(rg "Have not seen" $1/n1/nohup.dtnd* | cut -d " " -f 7- | sort -u | wc -l)
    if [ $N1_FORGOT -ne 1 ]; then
        IPND_CORRECT=0
    fi

    # expected 1
    N2_FORGOT=$(rg "Have not seen" $1/n2/nohup.dtnd* | cut -d " " -f 7- | sort -u | wc -l)
    if [ $N2_FORGOT -ne 1 ]; then
        IPND_CORRECT=0
    fi

    # expected 0
    N3_FORGOT=$(rg "Have not seen" $1/n3/nohup.dtnd* | cut -d " " -f 7- | sort -u | wc -l)
    if [ $N3_FORGOT -ne 0 ]; then
        IPND_CORRECT=0
    fi

    if [ $SENT -eq $RECEIVED ] && [ $IPND_CORRECT -eq 1 ] ; then
        echo "EXPERIMENT RESULT: Success | tx: $SENT, rx: $RECEIVED | $N1_PEERS $N2_PEERS $N3_PEERS | $N1_FORGOT $N2_FORGOT $N3_FORGOT"
    else 
        echo "EXPERIMENT RESULT: Failed | tx: $SENT, rx: $RECEIVED | $N1_PEERS $N2_PEERS $N3_PEERS | $N1_FOROGT $N2_FORGOT $N3_FORGOT"
    fi
}